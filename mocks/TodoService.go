// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go-server-exmaple/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// TodoService is an autogenerated mock type for the TodoService type
type TodoService struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: ctx, todo
func (_m *TodoService) CreateTodo(ctx context.Context, todo model.Todo) (int, error) {
	ret := _m.Called(ctx, todo)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.Todo) int); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Todo) error); ok {
		r1 = rf(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: ctx, id
func (_m *TodoService) DeleteTodo(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodo provides a mock function with given fields: ctx, id
func (_m *TodoService) GetTodo(ctx context.Context, id int) (*model.Todo, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Todo
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodos provides a mock function with given fields: ctx
func (_m *TodoService) GetTodos(ctx context.Context) ([]model.Todo, error) {
	ret := _m.Called(ctx)

	var r0 []model.Todo
	if rf, ok := ret.Get(0).(func(context.Context) []model.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: ctx, id
func (_m *TodoService) UpdateTodo(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoService creates a new instance of TodoService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoService(t testing.TB) *TodoService {
	mock := &TodoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
